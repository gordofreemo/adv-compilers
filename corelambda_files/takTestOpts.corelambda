-- From: https://gitlab.haskell.org/ghc/nofib/tree/master/imaginary/tak
{-
import System.Environment


-- code of unknown provenance (partain 95/01/25)

tak :: Int -> Int -> Int -> Int

tak x y z = if not(y < x) then z else tak (tak (x-1) y z) (tak (y-1) z x) (tak (z-1) x y)

main = do
	[xs,ys,zs] <- getArgs
	print (tak (read xs) (read ys) (read zs))
-}

let
  tak = fix (abs (tak:->(Int,->(Int,->(Int,Int))).
              abs (x:Int.
	       abs (y:Int.
	        abs (z:Int.
		 if <(y,x) then
		      app (app (app (tak,
		                         app (app (app (tak, -(x,1)), y), z)),
			        app (app (app (tak, -(y,1)), z), x)),
		           app (app (app (tak, -(z,1)), x), y))
		 else
		      z
		 fi)))))
in
  app (app (app (tak, 11), 6), 3)
end

